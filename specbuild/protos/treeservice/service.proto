// Code generated by furo-proto-gen. DO NOT EDIT.

syntax = "proto3";
package treeservice;



import "google/api/annotations.proto";

import "tree/tree.proto";
import "google/protobuf/empty.proto";



// service specs for the tree api
service TreeService {                       
   
    // Creates a new Tree
    rpc CreateTree (CreateTreeServiceRequest) returns (tree.TreeEntity){
        //
        option (google.api.http) = {
            post: "/mockdata/trees"
            body: "data"
        };
    }   
    // Delete a Tree
    rpc DeleteTree (DeleteTreeServiceRequest) returns (google.protobuf.Empty){
        //
        option (google.api.http) = {
            delete: "/mockdata/trees/{tre}"
            
        };
    }   
    // The Get method takes zero or more parameters, and returns a TreeEntity which contains a Tree
    rpc GetTree (GetTreeServiceRequest) returns (tree.TreeEntity){
        //
        option (google.api.http) = {
            get: "/mockdata/trees/{tre}/get.json"
        };
    }   
    // The List method takes zero or more parameters as input, and returns a TreeCollection of TreeEntity that match the input parameters.
    rpc ListTrees (ListTreeServiceRequest) returns (tree.TreeCollection){
        //Describe_the_query_params_if_you_have
        option (google.api.http) = {
            get: "/mockdata/trees"
        };
    }   
    // Updates a Tree, partial updates are supported
    rpc UpdateTree (UpdateTreeServiceRequest) returns (tree.TreeEntity){
        //
        option (google.api.http) = {
            patch: "/mockdata/trees/{tre}"
            body: "data"
        };
    }
}


   
message CreateTreeServiceRequest { 
    
    tree.Tree data =  1;  
}

   
message DeleteTreeServiceRequest { 
    
    string tre = 1;
    google.protobuf.Empty data =  2;  
}

   
message GetTreeServiceRequest { 
    
    string tre = 1; 
}

   
message ListTreeServiceRequest { 
    
    //Partial representation, fields=id,name
    string fields = 1;
    /**
     * Sort fields, comma separated list for the ordering
     * use **?filter=-display_name** with a dash to sort descending
     * use **?filter=display_name** to sort ascending
     */
    string order_by = 2;
    //Filter
    string filter = 3;
    //Page number for paginated content. Tipp: follow the HATEOAS next, prev,...
    int32 page = 4;
    //Number of elements to return per page
    int32 limit = 5;
    //https://cloud.google.com/apis/design/design_patterns#resource_view
    string view = 8;       
       
    //Query term to search a tree
    string q = 11;
}

   
message UpdateTreeServiceRequest { 
    
    string tre = 1;
    tree.Tree data =  2;  
}



